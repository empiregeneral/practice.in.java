import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;
import java.nio.CharBuffer;
import java.util.Iterator;
import java.util.stream.DoubleStream;
import java.io.*;
import java.util.Scanner;

class Bag<Item> implements Iterable<Item> {
    private Bag.Node<Item> first;    // beginning of bag
    private int n;               // number of elements in bag

    // helper linked list class
    private static class Node<Item> {
        private Item item;
        private Bag.Node<Item> next;
    }

    public Bag() {
        first = null;
        n = 0;
    }

    public boolean isEmpty() {
        return first == null;
    }

    public int size() {
        return n;
    }

    public void add(Item item) {
        Bag.Node<Item> oldfirst = first;
        first = new Node<Item>();
        first.item = item;
        first.next = oldfirst;
        n++;
    }

    @Override
    public Iterator<Item> iterator()  {
        return new LinkedIterator(first);
    }

    // an iterator, doesn't implement remove() since it's optional
    private class LinkedIterator implements Iterator<Item> {
        private Node<Item> current;

        public LinkedIterator(Bag.Node<Item> first) {
            current = first;
        }

        @Override
        public boolean hasNext()  { return current != null;                     }

        @Override
        public void remove()      { throw new UnsupportedOperationException();  }

        @Override
        public Item next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            Item item = current.item;
            current = current.next;
            return item;
        }
    }
}

class FinancialManagement implements Readable{
    private double mean;
    private int count = 1;

    public FinancialManagement(DoubleStream stream) {
        double result = stream.reduce(0.0, (sum, d1) -> (sum + d1));
        mean =  result / 12;
    }

    public FinancialManagement(Bag<Double> bag) {
        Iterator<Double> iterator = bag.iterator();
        double sum = 0.0;
        while(iterator.hasNext()) {
            sum = sum + iterator.next();
        }
        mean = sum / 12.00;
    }

    public double getMean() {
        return mean;
    }

    @Override
    public int read(CharBuffer cb) throws IOException {
        if (--count < 0) {
            return -1;
        }

        cb.append("$"+ String.format("%.2f", getMean()));
        cb.append("\n");

        return 10;
    }
}


public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(new BufferedInputStream(System.in));
        final int totalMonthly = 12;
        Bag<Double> bag = new Bag();

        for (int i = 0; i < totalMonthly; i++) {
            bag.add(scanner.nextDouble());
        }

        Readable readable = new FinancialManagement(bag);
        Scanner output = new Scanner(readable);
        while (output.hasNext()) {
            System.out.println(output.next());
        }
    }
}
